---
alwaysApply: true
---
# 🎨 Design System Ruleset for Shadcn-based UI

## 1. Setup & Implementation

### 1.1 Shadcn UI Kullanımı

**ZORUNLU: Tüm UI bileşenleri Shadcn UI ile oluşturulmalıdır.**

 **Add Components as Needed:**

   ```bash
   npx shadcn@latest add button card input dropdown-menu
   ```

**Eksik Bileşenler:**
- Yeni bileşen ihtiyacı olduğunda önce Shadcn UI'da mevcut olup olmadığını kontrol et
- Mevcut değilse Shadcn UI ile uyumlu custom bileşen oluştur
- Asla vanilla HTML/CSS ile bileşen oluşturma

 **Add Theme Tokens:**

   * Add color tokens to `globals.css` under `:root` using OKLCH or HSL.
   * Use design tokens for consistency: `--background`, `--primary`, etc.

### 1.2 Directory Structure

## 2. Design System Principles

### 2.1 Color System

* Use **pastel and soft tones** for student-friendly themes.
* Use `OKLCH` color space for consistent lightness control.
* Define core tokens:

  ```css
  --background
  --foreground
  --primary
  --primary-foreground
  --secondary
  --secondary-foreground
  --destructive
  --border
  --card
  --card-foreground
  ```

### 2.2 Typography

* Base font: `Inter`, `Nunito`, or `Poppins` for readability.
* Use consistent sizes and weights via utility classes:

  * Headings: `font-semibold text-xl+`
  * Body text: `font-normal text-base`
  * Captions: `text-sm text-muted-foreground`

### 2.3 Spacing & Layout

* Spacing units follow **4px scale**: `4, 8, 12, 16, 24, 32`.
* Container widths: `max-w-screen-md` for mobile-first layouts.
* Use `grid` or `flex` layouts with gaps defined in tokens.

### 2.4 Shadows & Borders

* Soft shadows only; avoid harsh drop shadows.
* Border radii: `rounded-2xl` for cards, `rounded-lg` for buttons.

### 2.5 Iconography

* Use `lucide-react` icons for consistency.
* Maintain stroke width: `1.5px`.

---

## 3. Component Guidelines

### 3.1 Shadcn UI Bileşen Kullanımı

**ZORUNLU KURALLAR:**
- Tüm butonlar için Shadcn UI Button bileşeni kullan
- Tüm kartlar için Shadcn UI Card bileşeni kullan  
- Tüm form elemanları için Shadcn UI Input, Select, Textarea kullan
- Asla HTML button, div, input kullanma

### 3.2 Buttons

* Shadcn UI Button bileşeni kullan: `import { Button } from "@/components/ui/button"`
* Use semantic variants: `primary`, `secondary`, `destructive`, `ghost`.
* Always define `disabled` and `hover` states.
* Avoid inline colors—always use tokens.

### 3.3 Cards

* Shadcn UI Card bileşeni kullan: `import { Card } from "@/components/ui/card"`
* Use for modular content (less than 400px width on mobile).
* Always include padding (`p-4` or `p-6`) and border color from tokens.

### 3.4 Typography Components

* Shadcn UI Typography bileşenleri kullan
* Create `Heading` and `Text` components for consistent typography.

### 3.5 Forms

* Shadcn UI Form bileşenleri kullan: `import { Input } from "@/components/ui/input"`
* Inputs should follow accessibility guidelines (contrast ratio > 4.5).
* Use `aria-label` and `id` attributes for all fields.

---

## 4. Accessibility & Theming

### 4.1 Light/Dark Mode

* Implement using `next-themes` or Tailwind's `dark:` class system.
* Ensure all tokens have dark variants.

### 4.2 Accessibility Standards

* Color contrast ratio >= 4.5:1.
* Focus rings must be visible on all interactive elements.
* Use motion-safe transitions.

---

## 5. Contribution & Governance

### 5.1 Token Governance

* All color, spacing, and typography changes must go through `theme/` configuration.
* Avoid hardcoded values in component styles.

### 5.2 Component Versioning

* Each custom UI component should include a `@version` tag.
* Follow semantic versioning (e.g., `v1.2.0`).

### 5.3 Documentation

* Use MDX for documenting reusable components and tokens.
* Include code previews and theme examples.

---

## ✅ Summary

This ruleset ensures a **consistent, scalable, and accessible design language** while leveraging **Shadcn UI** as the component base. Following these principles guarantees a coherent experience across all student-facing products.

## 🪟 Glass Design Based Süreç Yönetimi

### 6.1 Glass Efektleri Zorunlu Kullanım

**ZORUNLU: Tüm UI bileşenleri varsayılan olarak glass efektleri ile gelmelidir.**

```tsx
// ✅ DOĞRU - Glass efektleri varsayılan
<Button variant="default" size="default">
  <Icon />
</Button>

<Card variant="default">
  <CardContent>Content</CardContent>
</Card>

<Input variant="default" placeholder="Enter text" />

// ❌ YANLIŞ - Glass efektleri devre dışı
<Button variant="default" size="default" className="bg-white">
  <Icon />
</Button>
```

### 6.2 Glass Variant Sistemi

**ZORUNLU: Tüm glass efektleri variant sistemi ile yönetilmelidir.**

```tsx
// ✅ DOĞRU - Variant sistemi kullanımı
<Button variant="primary" size="default-text">
  <Icon />
  <span>Action</span>
</Button>

<Card variant="elevated">
  <CardContent>Enhanced glass effects</CardContent>
</Card>

// ❌ YANLIŞ - Manuel CSS sınıfları
<Button className="glass-button-primary glass-interactive">
  <Icon />
  <span>Action</span>
</Button>
```

### 6.3 AI Otomatik Süreç Yönetimi

**AI otomatik olarak şunları yapar:**

1. **Glass Efektleri Uygular**: Tüm komponentlere otomatik glass efektleri
2. **Shadcn UI Entegrasyonu**: Glass efektleri ile Shadcn UI entegrasyonu
3. **Responsive Tasarım**: Tüm ekran boyutlarında uyumlu glass efektleri
4. **Accessibility**: Glass efektleri ile accessibility standartları
5. **Performans Optimizasyonu**: Glass efektleri için performans optimizasyonu
6. **Hata Düzeltme**: Manuel glass sınıflarını otomatik düzeltme

### 6.4 Glass Efekt Kontrol Listesi

```typescript
// AI otomatik olarak şunları kontrol eder:
const glassEffectChecklist = {
  hasGlassEffects: true,        // Glass efektleri aktif mi?
  usesShadcnUI: true,           // Shadcn UI entegrasyonu var mı?
  isResponsive: true,          // Responsive tasarım uyumlu mu?
  isAccessible: true,           // Accessibility standartları sağlanıyor mu?
  isPerformant: true,           // Performans optimizasyonu yapılmış mı?
  usesVariantSystem: true        // Variant sistemi kullanılıyor mu?
}
```

### 6.5 Glass Efekt Hata Düzeltme

```tsx
// ❌ Hatalı kullanım - AI otomatik tespit eder
<div className="glass-panel glass-content">
  <button className="glass-button glass-interactive">
    <Icon />
  </button>
</div>

// ✅ AI otomatik düzeltme
<Card variant="default">
  <CardContent>
    <Button variant="default" size="default">
      <Icon />
    </Button>
  </CardContent>
</Card>
```

### 6.6 Glass Performans Optimizasyonu

```typescript
// AI otomatik olarak performans optimizasyonu yapar:
const glassPerformanceOptimization = {
  // Blur değerlerini optimize et (maksimum 32px)
  optimizeBlurValues: (blur: number) => Math.min(blur, 32),
  
  // Saturation değerlerini optimize et (maksimum 200%)
  optimizeSaturation: (saturation: number) => Math.min(saturation, 200),
  
  // Transition sürelerini optimize et (maksimum 500ms)
  optimizeTransitions: (duration: number) => Math.min(duration, 500)
}
```

---

## 🚨 ÖNEMLİ KURALLAR

1. **ZORUNLU**: Tüm UI bileşenleri Shadcn UI ile oluşturulmalıdır
2. **YASAK**: Vanilla HTML/CSS ile bileşen oluşturma
3. **GEREKLİ**: Eksik bileşenler için önce Shadcn UI kontrolü
4. **STANDART**: Tüm import'lar `@/components/ui/` path'inden yapılmalı
5. **GLASS ZORUNLU**: Tüm komponentler varsayılan glass efektleri ile gelmelidir
6. **GLASS VARIANT**: Tüm glass efektleri variant sistemi ile yönetilmelidir
7. **AI OTOMATIK**: AI otomatik olarak glass efektleri uygular ve kontrol eder
8. **GLASS PERFORMANS**: AI otomatik olarak glass efektleri optimize eder
